{"version":3,"sources":["math/combination.ts","blocks/card.tsx","blocks/card_list.tsx","blocks/empty_card.tsx","blocks/cards.tsx","blocks/hand.tsx","blocks/spectre.tsx","math/enumerateAllBoards.ts","math/combos.ts","math/computeEquity.ts","App.tsx","index.tsx"],"names":["Combination","SUITE_TO_SYMBOL_MAP","d","h","s","c","Card","card","onClick","disabled","className","undefined","ALL_CARDS","reduce","acc","suite","split","reverse","forEach","push","CardList","selectCard","selected","map","i","key","includes","EmptyCard","Cards","cards","Hand","hand","select","extra","length","CARD","CARDS_ROW","c1","i1","c2","i2","Spectre","selectHands","current_hands","filter","concat","row","j","getStraightHead","values","last","count","value","mapping","A","K","Q","J","T","9","8","7","6","getKickers","kickers","exclude","createCard","str","suit","compareHands","hands","board","combinations","sort","a","b","flush_cards","Object","suite_values","straight_head","combination","ROYAL_FLUSH","kicker","STRAIGHT_FLUSH","sets","pairs","Number","FOUR_OF_A_KIND","FLUSH","slice","FULL_HOUSE","STRAIGHT","THREE_OF_A_KIND","best_pairs","TWO_PAIRS","ONE_PAIR","HIGH_HAND","computeCombination","best_kickers","best_combo","index","winners","best_kicker","Infinity","SUITES","OFFSUITED","res","s1","s2","PAIR_SUITES","prettifyBalance","balance","e","val","toFixed","computeWinsAndTotal","current_board","dead_cards","flat","wins","Array","fill","total","available_cards","progress","result","next_card","pop","enumerateAllBoards","winner","computeEquityVsSpectre","spectre","combos","toCombos","w","t","current_hand","raw_winners","f","INIT_PLAYERS_INFO","mode","is_hero","current_card_index","compact","App","useState","players_info","setPlayersInfo","is_calculated","setIsCalculated","show_cardlist","setShowCardList","show_spectre","setShowSpectre","active_player","setActivePlayer","setBoard","board_active_index","setBoardActiveIndex","selected_player_info","getPlayerCardSelector","player_index","card_index","active_player_info","player_info","rendered_players_info","percent","current_spectre_mode_index","findIndex","info","setSpectreMode","join","selected_cards","target","closest","hand_index_to_percent","spectre_index","generator","nextIteration","setTimeout","next","done","computeEquity","percents","String","current_board_cards","el","document","createElement","setAttribute","style","position","left","body","appendChild","execCommand","removeChild","board_card","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f51900eb.chunk.js","sourcesContent":["type Suit = 'c' | 's' | 'd' | 'h';\r\ntype CardValue = 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;\r\ntype Card = { value: CardValue; suit: Suit; };\r\n\r\nenum Combination {\r\n    ROYAL_FLUSH,\r\n    STRAIGHT_FLUSH,\r\n    FOUR_OF_A_KIND,\r\n    FLUSH,\r\n    FULL_HOUSE,\r\n    STRAIGHT,\r\n    THREE_OF_A_KIND,\r\n    TWO_PAIRS,\r\n    ONE_PAIR,\r\n    HIGH_HAND,\r\n};\r\n\r\ntype FullCombination = {\r\n    combination: Combination;\r\n    kicker: CardValue[];\r\n}\r\n\r\nconst getStraightHead = (values: CardValue[]): CardValue | undefined => {\r\n    if (values[0] === 14) {\r\n        values = [...values, 5 as CardValue];\r\n    }\r\n    let last = 0;\r\n    let count = 1;\r\n    for (const value of values) {\r\n        if (last - 1 === value) {\r\n            count++;\r\n            if (count === 5) {\r\n                return value + 4 as CardValue;\r\n            }\r\n        } else if (last !== value) {\r\n            count = 1;\r\n        }\r\n        last = value;\r\n    }\r\n}\r\n\r\nconst mapping: Record<string, CardValue> = {\r\n    A: 14,\r\n    K: 13,\r\n    Q: 12,\r\n    J: 11,\r\n    T: 10,\r\n    9: 9,\r\n    8: 8,\r\n    7: 7,\r\n    6: 6,\r\n};\r\n\r\nconst getKickers = (kickers: CardValue[], exclude: CardValue[]): CardValue[] => {\r\n    return kickers.filter((value) => !exclude.includes(value));\r\n}\r\n\r\nconst createCard = (str: string): Card => ({ value: mapping[str[0]], suit: str[1] as Suit });\r\n\r\nconst computeCombination = (hand: string[], board: string[]): FullCombination => {\r\n    const cards = [\r\n        ...board.map(createCard),\r\n        ...hand.map(createCard)\r\n    ].sort((a, b) => b.value - a.value);\r\n    const kickers = cards.map((card) => card.value);\r\n    const suite: Record<Suit, CardValue[]> = { s: [], c: [], d: [], h: [] };\r\n    const values: Partial<Record<CardValue, number>> = {};\r\n\r\n    for (const { suit, value } of cards) {\r\n        suite[suit].push(value);\r\n        values[value] = (values[value] || 0) + 1;\r\n    }\r\n\r\n    let flush_cards: CardValue[] | undefined = undefined;\r\n    for (const suite_values of Object.values(suite)) {\r\n        if (suite_values.length > 4) {\r\n            flush_cards = suite_values;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (flush_cards) {\r\n        const straight_head = getStraightHead(flush_cards);\r\n        if (straight_head) {\r\n            if (straight_head === 14) {\r\n                return {\r\n                    combination: Combination.ROYAL_FLUSH,\r\n                    kicker: [],\r\n                };\r\n            }\r\n            return {\r\n                combination: Combination.STRAIGHT_FLUSH,\r\n                kicker: [straight_head],\r\n            };\r\n        }\r\n    }\r\n\r\n    const sets: CardValue[] = [];\r\n    const pairs: CardValue[] = [];\r\n\r\n    for (const key in values) {\r\n        const value = Number(key) as CardValue;\r\n        const count = values[value];\r\n        if (count === 4) {\r\n            return {\r\n                combination: Combination.FOUR_OF_A_KIND,\r\n                kicker: [value, getKickers(kickers, [value])[0]],\r\n            }\r\n        }\r\n        if (count === 3) {\r\n            sets.push(value);\r\n        }\r\n        if (count === 2) {\r\n            pairs.push(value);\r\n        }\r\n    }\r\n\r\n    if (flush_cards) {\r\n        return {\r\n            combination: Combination.FLUSH,\r\n            kicker: flush_cards.slice(-5),\r\n        };\r\n    }\r\n\r\n    if (sets.length === 2) {\r\n        return {\r\n            combination: Combination.FULL_HOUSE,\r\n            kicker: [sets[1], sets[0]],\r\n        };\r\n    }\r\n\r\n    if (sets.length && pairs.length) {\r\n        return {\r\n            combination: Combination.FULL_HOUSE,\r\n            kicker: [sets[0], pairs[pairs.length - 1]],\r\n        };\r\n    }\r\n\r\n    const straight_head = getStraightHead(kickers);\r\n    if (straight_head) {\r\n        return {\r\n            combination: Combination.STRAIGHT,\r\n            kicker: [straight_head],\r\n        };\r\n    }\r\n\r\n    if (sets.length) {\r\n        return {\r\n            combination: Combination.THREE_OF_A_KIND,\r\n            kicker: [sets[0], ...getKickers(kickers, sets).slice(0, 2)],\r\n        };\r\n    }\r\n\r\n    if (pairs.length > 1) {\r\n        const best_pairs = pairs.slice(-2);\r\n        return {\r\n            combination: Combination.TWO_PAIRS,\r\n            kicker: [best_pairs[1], best_pairs[0], getKickers(kickers, best_pairs)[0]],\r\n        };\r\n    }\r\n\r\n    if (pairs.length === 1) {\r\n        return {\r\n            combination: Combination.ONE_PAIR,\r\n            kicker: [pairs[0], ...getKickers(kickers, pairs).slice(0, 4)],\r\n        };\r\n    }\r\n\r\n    return {\r\n        combination: Combination.HIGH_HAND,\r\n        kicker: kickers.slice(0, 5),\r\n    };\r\n}\r\n\r\ntype BestKicker = {\r\n    index: number;\r\n    kicker: number[];\r\n}\r\n\r\nexport const compareHands = (hands: string[][], board: string[]): number[] => {\r\n    const combinations = hands.map((hand) => computeCombination(hand, board));\r\n\r\n    let best_kickers: BestKicker[] = [];\r\n    let best_combo = 10;\r\n\r\n    combinations.forEach(({ combination, kicker }, index) => {\r\n        if (combination < best_combo) {\r\n            best_combo = combination;\r\n            best_kickers = [{\r\n                index,\r\n                kicker\r\n            }];\r\n        } else if (combination === best_combo) {\r\n            best_kickers.push({\r\n                index,\r\n                kicker\r\n            });\r\n        }\r\n    });\r\n\r\n    if (best_kickers.length === 1) {\r\n        return [best_kickers[0].index];\r\n    }\r\n\r\n    let winners: number[] = [];\r\n    let best_kicker = [-Infinity];\r\n\r\n    best_kickers.forEach(({ kicker, index }) => {\r\n        for (let i = 0; i < kicker.length; i++) {\r\n            if (kicker[i] > best_kicker[i]) {\r\n                best_kicker = kicker;\r\n                winners = [index];\r\n                break;\r\n            } else if (kicker[i] !== best_kicker[i]) {\r\n                break;\r\n            } else if (i === best_kicker.length - 1) {\r\n                winners.push(index);\r\n            }\r\n        }\r\n    });\r\n\r\n    return winners;\r\n}\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    card: string;\r\n    disabled?: boolean;\r\n    onClick: () => void;\r\n};\r\n\r\nconst SUITE_TO_SYMBOL_MAP: Record<string, string> = {\r\n    d: \"♦\",\r\n    h: \"♥\",\r\n    s: \"♠\",\r\n    c: \"♣\",\r\n};\r\n\r\nexport const Card: React.FC<Props> = ({ card, onClick, disabled }) => {\r\n    let className = \"card card__suite-\" + card[1];\r\n    if (disabled) {\r\n        className += \" card__disabled\";\r\n    }\r\n\r\n    return (\r\n        <div className={className} onClick={disabled ? undefined : onClick}>\r\n            <div className=\"card__top\">{card[0]}</div>\r\n            <div className=\"card__bottom\">{SUITE_TO_SYMBOL_MAP[card[1]]}</div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Card } from './card';\r\n\r\ntype Props = {\r\n    selected: string[];\r\n    selectCard: (card: string) => void;\r\n};\r\n\r\nconst ALL_CARDS = ['c', 's', 'h', 'd'].reduce<string[]>((acc, suite) => {\r\n    '6789TJQKA'.split('').reverse().forEach((card) => {\r\n        acc.push(card + suite);\r\n    });\r\n    return acc;\r\n}, []);\r\n\r\nexport const CardList: React.FC<Props> = ({ selectCard, selected }) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n                ALL_CARDS.map((card, i) =>\r\n                    <Card key={i} card={card} onClick={() => selectCard(card)} disabled={selected.includes(card)} />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    onClick: () => void;\r\n    selected: boolean;\r\n};\r\n\r\nexport const EmptyCard: React.FC<Props> = ({ onClick, selected }) => {\r\n    let className = \"card card__empty\";\r\n    if (selected) {\r\n        className += \" card__selected\";\r\n    }\r\n    return (\r\n        <div className={className} onClick={onClick} />\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Card } from './card';\r\nimport { EmptyCard } from './empty_card';\r\n\r\ntype Props = {\r\n    className: string;\r\n    cards: Array<string | undefined>;\r\n    selectCard: (index: number) => void;\r\n    selected: number;\r\n};\r\n\r\nexport const Cards: React.FC<Props> = ({ cards, selectCard, className, selected }) => {\r\n    return (\r\n        <div className={className}>\r\n            {\r\n                cards.map((card, i) => card\r\n                    ? <Card key={i} card={card} onClick={() => selectCard(i)} />\r\n                    : <EmptyCard selected={i === selected} key={i} onClick={() => selectCard(i)} />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    hand: string;\r\n    select: (hand: string) => void;\r\n    selected: boolean;\r\n}\r\n\r\nexport const Hand: React.FC<Props> = ({ hand, select, selected }) => {\r\n    const extra = hand.length === 2\r\n        ? 'hand__pair'\r\n        : hand[2] === 's'\r\n            ? 'hand__suited'\r\n            : 'hand__offsuite';\r\n    return (\r\n        <div onClick={() => select(hand)} className={`hand ${extra}${selected ? \" hand__selected\" : \"\"}`}>\r\n            {hand}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Hand } from './hand';\r\n\r\nconst CARD = ['A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6'];\r\nconst CARDS_ROW = CARD.map((c1, i1) => CARD.map((c2, i2) => {\r\n    if (c1 === c2) {\r\n        return c1 + c2;\r\n    }\r\n    if (i1 > i2) {\r\n        return c2 + c1 + 's';\r\n    }\r\n\r\n    return c1 + c2 + 'o';\r\n}));\r\n\r\n\r\ntype Props = {\r\n    selectHands: (hands: string[]) => void;\r\n    current_hands: string[];\r\n}\r\n\r\nexport const Spectre: React.FC<Props> = ({ selectHands, current_hands }) => {\r\n    const select = (hand: string) => {\r\n        if (current_hands.includes(hand)) {\r\n            selectHands(current_hands.filter((card) => card !== hand));\r\n        } else {\r\n            selectHands(current_hands.concat(hand));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"spectre\">\r\n            {\r\n                CARDS_ROW.map((row, i) => (\r\n                    <div key={i} className=\"spectre__row\">\r\n                        {row.map((hand, j) => <Hand key={j} selected={current_hands.includes(hand)} select={select} hand={hand} />)}\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};","const ALL_CARDS = '6789TJQKA'.split('').reduce<string[]>((acc, card) => {\r\n    ['c', 's', 'h', 'd'].forEach((suite) => {\r\n        acc.push(card + suite);\r\n    });\r\n    return acc;\r\n}, []);\r\n\r\nexport const enumerateAllBoards = (dead_cards: string[], board: string[] = []): string[][] => {\r\n    if (board.length === 5) {\r\n        return [board];\r\n    }\r\n    const available_cards = ALL_CARDS.filter((card) => !board.includes(card) && !dead_cards.includes(card));\r\n    const progress: string[][] = [board];\r\n    const result: string[][] = [];\r\n    while (available_cards.length) {\r\n        const next_card = available_cards.pop()!;\r\n        progress.forEach((cards) => {\r\n            if (cards.length === 4) {\r\n                result.push(cards.concat(next_card));\r\n            } else {\r\n                if (cards.length + available_cards.length > 3) {\r\n                    progress.push(cards.concat(next_card));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n};\r\n","const SUITES = ['c', 's', 'd', 'h'];\r\nconst OFFSUITED = SUITES.reduce<string[][]>((res, s1) => {\r\n    SUITES.forEach((s2) => {\r\n        if (s1 !== s2) {\r\n            res.push([s1, s2]);\r\n        }\r\n    });\r\n\r\n    return res;\r\n}, []);\r\n\r\nconst PAIR_SUITES = SUITES.reduce<string[][]>((res, s1, i1) => {\r\n    SUITES.forEach((s2, i2) => {\r\n        if (i1 < i2) {\r\n            res.push([s1, s2]);\r\n        }\r\n    });\r\n\r\n    return res;\r\n}, []);\r\n\r\nexport const toCombos = (hands: string[]): [string, string][] => {\r\n    return hands.reduce<[string, string][]>((res, hand) => {\r\n        const [c1, c2, suit] = hand.split('');\r\n        if (hand.length === 2) {\r\n            res.push(...PAIR_SUITES.map<[string, string]>(([s1, s2]) => [c1 + s1, c2 + s2]));\r\n        } else if (suit === 's') {\r\n            res.push(...SUITES.map<[string, string]>((s) => [c1 + s, c2 + s]));\r\n        } else {\r\n            res.push(...OFFSUITED.map<[string, string]>(([s1, s2]) => [c1 + s1, c2 + s2]));\r\n        }\r\n\r\n        return res;\r\n    }, []);\r\n};\r\n","import { enumerateAllBoards } from './enumerateAllBoards';\r\nimport { compareHands } from './combination';\r\nimport { toCombos } from './combos';\r\n\r\nconst prettifyBalance = (balance: number[]) => {\r\n    const e = balance.reduce((res, val) => res - val, 100) / balance.length;\r\n\r\n    return balance.map((val) => Number((val + e).toFixed(2)));\r\n}\r\n\r\nconst computeWinsAndTotal = (hands: [string, string][], current_board: string[]) => {\r\n    const dead_cards = hands.flat();\r\n    const wins = Array(hands.length).fill(0);\r\n    let total = 0;\r\n    enumerateAllBoards(dead_cards, current_board).forEach((board) => {\r\n        total += 1;\r\n        const winners = compareHands(hands, board);\r\n\r\n        winners.forEach((winner) => {\r\n            wins[winner] += 1 / winners.length;\r\n        });\r\n    });\r\n\r\n    return {\r\n        wins,\r\n        total\r\n    };\r\n}\r\n\r\nexport const computeEquity = (hands: [string, string][], current_board: string[]) => {\r\n    const { wins, total } = computeWinsAndTotal(hands, current_board);\r\n    const raw_winners = wins.map((count) => Number((count / total * 100).toFixed(2)));\r\n\r\n    return prettifyBalance(raw_winners);\r\n}\r\n\r\nexport const computeEquityVsSpectre = (hands: [string, string][], spectre: string[], current_board: string[]) => {\r\n    const dead_cards = hands.flat().concat(current_board);\r\n    const combos = toCombos(spectre).filter((h) => !dead_cards.includes(h[0]) && !dead_cards.includes(h[1]));\r\n\r\n    return function* () {\r\n        let w = Array(hands.length + 1).fill(0);\r\n        let t = 0;\r\n\r\n        for (const current_hand of combos) {\r\n            const { wins, total } = computeWinsAndTotal([...hands, current_hand], current_board);\r\n            w = w.map((count, index) => count + wins[index]);\r\n            t = t + total;\r\n\r\n            const raw_winners = w.map((count) => Number((count / t * 100).toFixed(2)));\r\n            yield prettifyBalance(raw_winners);\r\n        }\r\n    };\r\n};\r\n","import React, { useState } from 'react';\r\nimport { CardList } from './blocks/card_list';\r\nimport { Cards } from './blocks/cards';\r\nimport { Spectre } from './blocks/spectre';\r\nimport './App.css';\r\nimport { computeEquity, computeEquityVsSpectre } from './math/computeEquity';\r\n\r\ntype Board = [string | undefined, string | undefined, string | undefined, string | undefined, string | undefined];\r\ntype PlayerHand = [string | undefined, string | undefined];\r\n\r\ntype CardMode = 'spectre' | 'hand';\r\n\r\ntype PlayerSpectreMode = {\r\n\tmode: 'spectre';\r\n\tspectre: string[];\r\n};\r\n\r\ntype PlayerHandMode = {\r\n\tmode: 'hand';\r\n\tcurrent_card_index: number;\r\n\thand: PlayerHand;\r\n}\r\n\r\ntype PlayerInfo = (PlayerSpectreMode | PlayerHandMode) & { percent?: number; is_hero?: boolean; };\r\n\r\nconst INIT_PLAYERS_INFO: PlayerInfo[] = [\r\n\t{ mode: 'hand', is_hero: true, hand: [undefined, undefined], current_card_index: -1 },\r\n\t...Array(4).fill(0).map<PlayerInfo>(() => ({ mode: 'hand', hand: [undefined, undefined], current_card_index: -1 }))\r\n];\r\n\r\nconst compact = <T extends any>(val: T | undefined): val is NonNullable<T> => !!val;\r\n\r\nfunction App() {\r\n\tconst [players_info, setPlayersInfo] = useState(INIT_PLAYERS_INFO);\r\n\r\n\tconst [is_calculated, setIsCalculated] = useState(false);\r\n\tconst [show_cardlist, setShowCardList] = useState(false);\r\n\tconst [show_spectre, setShowSpectre] = useState(false);\r\n\r\n\tconst [active_player, setActivePlayer] = useState(0);\r\n\r\n\tconst [board, setBoard] = useState<Board>([undefined, undefined, undefined, undefined, undefined]);\r\n\tconst [board_active_index, setBoardActiveIndex] = useState(-1);\r\n\r\n\tconst selected_player_info = players_info[active_player];\r\n\r\n\tconst getPlayerCardSelector = (player_index: number) => (card_index: number) => {\r\n\t\tconst active_player_info = players_info[player_index];\r\n\t\tsetActivePlayer(player_index);\r\n\t\tsetBoardActiveIndex(-1);\r\n\r\n\t\tif (active_player_info.mode === 'hand') {\r\n\t\t\tsetPlayersInfo(players_info.map((player_info, index) => index === player_index\r\n\t\t\t\t? {\r\n\t\t\t\t\t...active_player_info,\r\n\t\t\t\t\thand: card_index === 0\r\n\t\t\t\t\t\t? [undefined, undefined]\r\n\t\t\t\t\t\t: [active_player_info.hand[0], undefined],\r\n\t\t\t\t\tcurrent_card_index: card_index\r\n\t\t\t\t}\r\n\t\t\t\t: { ...player_info, current_card_index: -1 }\r\n\t\t\t));\r\n\t\t\tsetShowCardList(true);\r\n\t\t}\r\n\t};\r\n\r\n\tconst playerShowSpectre = (player_index: number) => {\r\n\t\tsetActivePlayer(player_index);\r\n\t\tsetPlayersInfo(players_info.map((player_info) => ({ ...player_info, current_card_index: -1 })));\r\n\t\tsetShowCardList(false);\r\n\t\tsetShowSpectre(true);\r\n\t};\r\n\r\n\tconst selectBoardCard = (index: number) => {\r\n\t\tsetPlayersInfo(players_info.map((player_info) => ({ ...player_info, current_card_index: -1 })));\r\n\t\tsetBoard(board.map((card, card_index) => card_index < index ? card : undefined) as Board);\r\n\t\tsetBoardActiveIndex(index);\r\n\t\tsetShowCardList(true);\r\n\t};\r\n\r\n\tconst selectPlayerSpectre = (spectre: string[]) => {\r\n\t\tsetPlayersInfo(players_info.map((player_info, player_index) => player_index === active_player\r\n\t\t\t? { mode: 'spectre', spectre }\r\n\t\t\t: player_info\r\n\t\t));\r\n\t};\r\n\r\n\tconst setSpectreMode = (index: number) => {\r\n\t\tconst current_spectre_mode_index = players_info.findIndex((info) => info.mode === \"spectre\");\r\n\r\n\t\tsetPlayersInfo(players_info.map((player_info, player_index) => player_index === current_spectre_mode_index\r\n\t\t\t? { mode: 'hand', hand: [undefined, undefined], current_card_index: -1 }\r\n\t\t\t: player_index === index\r\n\t\t\t\t? { mode: 'spectre', spectre: [] }\r\n\t\t\t\t: player_info\r\n\t\t));\r\n\t};\r\n\r\n\tconst rendered_players_info = players_info.map((player_info, index) => {\r\n\t\tif (player_info.is_hero && player_info.mode === 'hand') {\r\n\t\t\treturn (\r\n\t\t\t\t<div key={index} className=\"player\">\r\n\t\t\t\t\tHero\r\n\t\t\t\t\t{player_info.percent !== undefined && <span className=\"win_percent\">{player_info.percent}%</span>}\r\n\t\t\t\t\t<Cards className=\"player_cards\" selected={player_info.current_card_index} cards={player_info.hand} selectCard={getPlayerCardSelector(index)} />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<div key={index} className=\"player\">\r\n\t\t\t\tPlayer{index + 1}\r\n\t\t\t\t<button className=\"mode-toggler\" onClick={() => setSpectreMode(index)}>%</button>\r\n\t\t\t\t{player_info.percent !== undefined && <span className=\"win_percent\">{player_info.percent}%</span>}\r\n\t\t\t\t{player_info.mode === \"spectre\"\r\n\t\t\t\t\t? <button className=\"show_spectre\" onClick={() => playerShowSpectre(index)}>{player_info.spectre.join(\", \") || \"SELECT SPECTRE\"}</button>\r\n\t\t\t\t\t: <Cards className=\"player_cards\" selected={player_info.current_card_index} cards={player_info.hand} selectCard={getPlayerCardSelector(index)} />\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n\r\n\tconst compute = () => {\r\n\t\tconst hands: [string, string][] = [];\r\n\t\tconst hand_index_to_percent: Record<number, number | undefined> = {};\r\n\t\tlet spectre: string[] | undefined = undefined;\r\n\t\tlet spectre_index: number | undefined = undefined;\r\n\r\n\t\tplayers_info.forEach((player_info, index) => {\r\n\t\t\tif (player_info.mode === 'spectre' && player_info.spectre.length) {\r\n\t\t\t\tspectre_index = index;\r\n\t\t\t\tspectre = player_info.spectre;\r\n\t\t\t} else if (player_info.mode === 'hand' && player_info.hand[0] && player_info.hand[1]) {\r\n\t\t\t\thands.push(player_info.hand as [string, string]);\r\n\t\t\t\thand_index_to_percent[index] = 0;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tif (!spectre) {\r\n\t\t\tif (hands.length < 2) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tsetIsCalculated(true);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconst percent = computeEquity(hands, board.filter(compact));\r\n\t\t\t\tlet i = 0;\r\n\t\t\t\tfor (const key in hand_index_to_percent) {\r\n\t\t\t\t\thand_index_to_percent[key] = percent[i];\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetPlayersInfo(players_info.map((player_info, index) => hand_index_to_percent[index] !== undefined\r\n\t\t\t\t\t? { ...player_info, percent: hand_index_to_percent[index] }\r\n\t\t\t\t\t: { ...player_info, percent: undefined }\r\n\t\t\t\t));\r\n\r\n\t\t\t\tsetIsCalculated(false);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (hands.length < 1) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tconst generator = computeEquityVsSpectre(hands, spectre, board.filter(compact))();\r\n\t\t\tconst nextIteration = () => setTimeout(() => {\r\n\t\t\t\tconst next = generator.next();\r\n\t\t\t\tif (next.done) {\r\n\t\t\t\t\tsetIsCalculated(false);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tlet i = 0;\r\n\t\t\t\t\tfor (const key in hand_index_to_percent) {\r\n\t\t\t\t\t\thand_index_to_percent[key] = next.value[i];\r\n\t\t\t\t\t\ti++;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tsetPlayersInfo(players_info.map((player_info, index) => hand_index_to_percent[index] !== undefined\r\n\t\t\t\t\t\t? { ...player_info, percent: hand_index_to_percent[index] }\r\n\t\t\t\t\t\t: index === spectre_index\r\n\t\t\t\t\t\t\t? { ...player_info, percent: next.value[next.value.length - 1] }\r\n\t\t\t\t\t\t\t: { ...player_info, percent: undefined }\r\n\t\t\t\t\t));\r\n\r\n\t\t\t\t\tnextIteration();\r\n\t\t\t\t}\r\n\t\t\t}, 5);\r\n\t\t\tsetIsCalculated(true);\r\n\t\t\tnextIteration();\r\n\t\t}\r\n\t}\r\n\r\n\tconst selected_cards = players_info.reduce<string[]>((result, player_info) => {\r\n\t\tif (player_info.mode === 'hand') {\r\n\t\t\treturn result.concat(player_info.hand.filter(compact));\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}, board.filter(compact));\r\n\r\n\tconst selectCard = (card: string) => {\r\n\t\tif (board_active_index !== -1) {\r\n\t\t\tsetBoard(board.map((board_card, index) => index === board_active_index ? card : board_card) as Board);\r\n\t\t\tif (board_active_index > 1) {\r\n\t\t\t\tsetShowCardList(false);\r\n\t\t\t} else {\r\n\t\t\t\tsetBoardActiveIndex(board_active_index + 1);\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst current_card_index = (selected_player_info as PlayerHandMode).current_card_index;\r\n\r\n\t\tsetPlayersInfo(players_info.map((player_info, index) => index === active_player\r\n\t\t\t? {\r\n\t\t\t\t...selected_player_info,\r\n\t\t\t\thand: current_card_index === 0\r\n\t\t\t\t\t? [card, undefined]\r\n\t\t\t\t\t: [(selected_player_info as PlayerHandMode).hand[0], card],\r\n\t\t\t\tcurrent_card_index: current_card_index + 1,\r\n\t\t\t}\r\n\t\t\t: player_info\r\n\t\t));\r\n\r\n\t\tif (current_card_index === 1) {\r\n\t\t\tsetShowCardList(false);\r\n\t\t}\r\n\t};\r\n\r\n\tconst onCalculatorClick = (e: React.MouseEvent<HTMLDivElement>) => {\r\n\t\tif (show_cardlist && !(e.target as any).closest(\".card-list\")) {\r\n\t\t\tsetShowCardList(false);\r\n\t\t\tsetPlayersInfo(players_info.map((player_info) => ({ ...player_info, current_card_index: -1 })));\r\n\t\t\tif (board_active_index) {\r\n\t\t\t\tsetBoardActiveIndex(-1);\r\n\t\t\t}\r\n\t\t} else if (show_spectre && !(e.target as any).closest(\".spectre\")) {\r\n\t\t\tsetShowSpectre(false);\r\n\t\t}\r\n\t};\r\n\r\n\tconst copyToClipboard = () => {\r\n\t\tconst { hands, percents } = players_info.reduce((res, player_info) => {\r\n\t\t\tif (player_info.mode === 'hand' && player_info.hand[0] && player_info.hand[1]) {\r\n\t\t\t\tres.hands.push(player_info.hand.join(''));\r\n\t\t\t\tres.percents.push(String(player_info.percent));\r\n\t\t\t} else if (player_info.mode === 'spectre' && player_info.spectre.length) {\r\n\t\t\t\tres.hands.push(player_info.spectre.join(','));\r\n\t\t\t\tres.percents.push(String(player_info.percent));\r\n\t\t\t}\r\n\r\n\t\t\treturn res;\r\n\t\t}, { hands: [], percents: [] } as { hands: string[], percents: string[] });\r\n\r\n\t\tif (!hands.length) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tlet result = hands.join(' vs ') + ' - ' + percents.join(' vs ');\r\n\t\tconst current_board_cards = board.filter(compact);\r\n\t\tif (current_board_cards.length) {\r\n\t\t\tresult = current_board_cards.join('') + ' : ' + result;\r\n\t\t}\r\n\r\n\t\tconst el = document.createElement('textarea');\r\n\t\tel.value = result;\r\n\t\tel.setAttribute('readonly', '');\r\n\t\tel.style.position = 'absolute';\r\n\t\tel.style.left = '-9999px';\r\n\t\tdocument.body.appendChild(el);\r\n\t\tel.select();\r\n\t\tdocument.execCommand('copy');\r\n\t\tdocument.body.removeChild(el);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"calculator\" onClick={onCalculatorClick}>\r\n\t\t\t<div className=\"left-row\">\r\n\t\t\t\t{rendered_players_info}\r\n\t\t\t\t<div className=\"board\">\r\n\t\t\t\t\tBOARD\r\n\t\t\t\t\t<Cards selected={board_active_index} className=\"board_cards\" selectCard={selectBoardCard} cards={board} />\r\n\t\t\t\t</div>\r\n\t\t\t\t{is_calculated\r\n\t\t\t\t\t? <div className=\"loader\">Calculating...</div>\r\n\t\t\t\t\t: (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<button className=\"action-button\" onClick={compute}>COMPUTE</button>\r\n\t\t\t\t\t\t\t<button className=\"action-button\" onClick={copyToClipboard}>COPY</button>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"right-row\">\r\n\t\t\t\t{show_cardlist && <CardList selected={selected_cards} selectCard={selectCard} />}\r\n\t\t\t\t{show_spectre && selected_player_info.mode === 'spectre' && <Spectre current_hands={selected_player_info.spectre} selectHands={selectPlayerSpectre} />}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}