{"version":3,"sources":["math/combination.ts","blocks/card.tsx","blocks/card_list.tsx","blocks/empty_card.tsx","blocks/cards.tsx","blocks/hand.tsx","blocks/spectre.tsx","math/enumerateAllBoards.ts","math/combos.ts","math/computeEquity.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Combination","Card","card","onClick","disabled","className","undefined","ALL_CARDS","reduce","acc","suite","split","reverse","forEach","push","CardList","selectCard","selected","map","i","key","includes","EmptyCard","Cards","cards","Hand","hand","select","extra","length","CARD","CARDS_ROW","c1","i1","c2","i2","Spectre","selectHands","currentHands","useState","setCards","filter","concat","row","j","getStraightHead","values","last","count","value","mapping","A","K","Q","J","T","9","8","7","6","getKickers","kickers","exclude","createCard","str","suit","compareHands","hands","board","combinations","sort","a","b","s","c","d","h","flush_cards","Object","suite_values","straight_head","combination","ROYAL_FLUSH","kicker","STRAIGHT_FLUSH","sets","pairs","Number","FOUR_OF_A_KIND","FLUSH","slice","FULL_HOUSE","STRAIGHT","THREE_OF_A_KIND","best_pairs","TWO_PAIRS","ONE_PAIR","HIGH_HAND","computeCombination","best_kickers","best_combo","index","winners","best_kicker","Infinity","SUITES","OFFSUITED","res","s1","s2","PAIR_SUITES","prettifyBalance","balance","e","val","toFixed","computeWinsAndTotal","current_board","dead_cards","flat","wins","Array","fill","total","available_cards","progress","result","next_card","pop","enumerateAllBoards","winner","computeEquityVsSpectre","spectre","combos","toCombos","w","t","current_hand","console","log","raw_winners","f","INIT_PLAYERS_INFO","mode","is_hero","current_card_index","compact","App","players_info","setPlayersInfo","is_calculated","setIsCalculated","show_cardlist","setShowCardList","show_spectre","setShowSpectre","active_player","setActivePlayer","setBoard","board_active_index","setBoardActiveIndex","selected_player_info","getPlayerCardSelector","player_index","card_index","active_player_info","player_info","rendered_players_info","percent","current_spectre_mode_index","findIndex","info","setSpectreMode","join","selected_cards","hand_index_to_percent","spectre_index","generator","nextIteration","setTimeout","next","done","computeEquity","board_card","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9e04973.chunk.js","sourcesContent":["type Suit = 'c' | 's' | 'd' | 'h';\r\ntype CardValue = 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;\r\ntype Card = { value: CardValue; suit: Suit; };\r\n\r\nenum Combination {\r\n    ROYAL_FLUSH,\r\n    STRAIGHT_FLUSH,\r\n    FOUR_OF_A_KIND,\r\n    FLUSH,\r\n    FULL_HOUSE,\r\n    STRAIGHT,\r\n    THREE_OF_A_KIND,\r\n    TWO_PAIRS,\r\n    ONE_PAIR,\r\n    HIGH_HAND,\r\n};\r\n\r\ntype FullCombination = {\r\n    combination: Combination;\r\n    kicker: CardValue[];\r\n}\r\n\r\nconst getStraightHead = (values: CardValue[]): CardValue | undefined => {\r\n    if (values[0] === 14) {\r\n        values = [...values, 5 as CardValue];\r\n    }\r\n    let last = 0;\r\n    let count = 1;\r\n    for (const value of values) {\r\n        if (last - 1 === value) {\r\n            count++;\r\n            if (count === 5) {\r\n                return value + 4 as CardValue;\r\n            }\r\n        } else if (last !== value) {\r\n            count = 1;\r\n        }\r\n        last = value;\r\n    }\r\n}\r\n\r\nconst mapping: Record<string, CardValue> = {\r\n    A: 14,\r\n    K: 13,\r\n    Q: 12,\r\n    J: 11,\r\n    T: 10,\r\n    9: 9,\r\n    8: 8,\r\n    7: 7,\r\n    6: 6,\r\n};\r\n\r\nconst getKickers = (kickers: CardValue[], exclude: CardValue[]): CardValue[] => {\r\n    return kickers.filter((value) => !exclude.includes(value));\r\n}\r\n\r\nconst createCard = (str: string): Card => ({ value: mapping[str[0]], suit: str[1] as Suit });\r\n\r\nconst computeCombination = (hand: string[], board: string[]): FullCombination => {\r\n    const cards = [\r\n        ...board.map(createCard),\r\n        ...hand.map(createCard)\r\n    ].sort((a, b) => b.value - a.value);\r\n    const kickers = cards.map((card) => card.value);\r\n    const suite: Record<Suit, CardValue[]> = { s: [], c: [], d: [], h: [] };\r\n    const values: Partial<Record<CardValue, number>> = {};\r\n\r\n    for (const { suit, value } of cards) {\r\n        suite[suit].push(value);\r\n        values[value] = (values[value] || 0) + 1;\r\n    }\r\n\r\n    let flush_cards: CardValue[] | undefined = undefined;\r\n    for (const suite_values of Object.values(suite)) {\r\n        if (suite_values.length > 4) {\r\n            flush_cards = suite_values;\r\n            break;\r\n        }\r\n    }\r\n\r\n    if (flush_cards) {\r\n        const straight_head = getStraightHead(flush_cards);\r\n        if (straight_head) {\r\n            if (straight_head === 14) {\r\n                return {\r\n                    combination: Combination.ROYAL_FLUSH,\r\n                    kicker: [],\r\n                };\r\n            }\r\n            return {\r\n                combination: Combination.STRAIGHT_FLUSH,\r\n                kicker: [straight_head],\r\n            };\r\n        }\r\n    }\r\n\r\n    const sets: CardValue[] = [];\r\n    const pairs: CardValue[] = [];\r\n\r\n    for (const key in values) {\r\n        const value = Number(key) as CardValue;\r\n        const count = values[value];\r\n        if (count === 4) {\r\n            return {\r\n                combination: Combination.FOUR_OF_A_KIND,\r\n                kicker: [value, getKickers(kickers, [value])[0]],\r\n            }\r\n        }\r\n        if (count === 3) {\r\n            sets.push(value);\r\n        }\r\n        if (count === 2) {\r\n            pairs.push(value);\r\n        }\r\n    }\r\n\r\n    if (flush_cards) {\r\n        return {\r\n            combination: Combination.FLUSH,\r\n            kicker: flush_cards.slice(-5),\r\n        };\r\n    }\r\n\r\n    if (sets.length === 2) {\r\n        return {\r\n            combination: Combination.FULL_HOUSE,\r\n            kicker: [sets[1], sets[0]],\r\n        };\r\n    }\r\n\r\n    if (sets.length && pairs.length) {\r\n        return {\r\n            combination: Combination.FULL_HOUSE,\r\n            kicker: [sets[0], pairs[pairs.length - 1]],\r\n        };\r\n    }\r\n\r\n    const straight_head = getStraightHead(kickers);\r\n    if (straight_head) {\r\n        return {\r\n            combination: Combination.STRAIGHT,\r\n            kicker: [straight_head],\r\n        };\r\n    }\r\n\r\n    if (sets.length) {\r\n        return {\r\n            combination: Combination.THREE_OF_A_KIND,\r\n            kicker: [sets[0], ...getKickers(kickers, sets).slice(0, 2)],\r\n        };\r\n    }\r\n\r\n    if (pairs.length > 1) {\r\n        const best_pairs = pairs.slice(-2);\r\n        return {\r\n            combination: Combination.TWO_PAIRS,\r\n            kicker: [best_pairs[1], best_pairs[0], getKickers(kickers, best_pairs)[0]],\r\n        };\r\n    }\r\n\r\n    if (pairs.length === 1) {\r\n        return {\r\n            combination: Combination.ONE_PAIR,\r\n            kicker: [pairs[0], ...getKickers(kickers, pairs).slice(0, 4)],\r\n        };\r\n    }\r\n\r\n    return {\r\n        combination: Combination.HIGH_HAND,\r\n        kicker: kickers.slice(0, 5),\r\n    };\r\n}\r\n\r\ntype BestKicker = {\r\n    index: number;\r\n    kicker: number[];\r\n}\r\n\r\nexport const compareHands = (hands: string[][], board: string[]): number[] => {\r\n    const combinations = hands.map((hand) => computeCombination(hand, board));\r\n\r\n    let best_kickers: BestKicker[] = [];\r\n    let best_combo = 10;\r\n\r\n    combinations.forEach(({ combination, kicker }, index) => {\r\n        if (combination < best_combo) {\r\n            best_combo = combination;\r\n            best_kickers = [{\r\n                index,\r\n                kicker\r\n            }];\r\n        } else if (combination === best_combo) {\r\n            best_kickers.push({\r\n                index,\r\n                kicker\r\n            });\r\n        }\r\n    });\r\n\r\n    let winners: number[] = [];\r\n    let best_kicker = [-Infinity];\r\n\r\n    best_kickers.forEach(({ kicker, index }) => {\r\n        for (let i = 0; i < kicker.length; i++) {\r\n            if (kicker[i] > best_kicker[i]) {\r\n                best_kicker = kicker;\r\n                winners = [index];\r\n                break;\r\n            } else if (kicker[i] !== best_kicker[i]) {\r\n                break;\r\n            } else if (i === best_kicker.length - 1) {\r\n                winners.push(index);\r\n            }\r\n        }\r\n    });\r\n\r\n    return winners;\r\n}\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    card: string;\r\n    disabled?: boolean;\r\n    onClick: () => void;\r\n};\r\n\r\nexport const Card: React.FC<Props> = ({ card, onClick, disabled }) => {\r\n    let className = \"card card__suite-\" + card[1];\r\n    if (disabled) {\r\n        className += \" card__disabled\";\r\n    }\r\n    return (\r\n        <div className={className} onClick={disabled ? undefined : onClick}>\r\n            {card}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Card } from './card';\r\n\r\ntype Props = {\r\n    selected: string[];\r\n    selectCard: (card: string) => void;\r\n};\r\n\r\nconst ALL_CARDS = ['c', 's', 'h', 'd'].reduce<string[]>((acc, suite) => {\r\n    '6789TJQKA'.split('').reverse().forEach((card) => {\r\n        acc.push(card + suite);\r\n    });\r\n    return acc;\r\n}, []);\r\n\r\nexport const CardList: React.FC<Props> = ({ selectCard, selected }) => {\r\n    return (\r\n        <div className=\"card-list\">\r\n            {\r\n                ALL_CARDS.map((card, i) =>\r\n                    <Card key={i} card={card} onClick={() => selectCard(card)} disabled={selected.includes(card)} />\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    onClick: () => void;\r\n};\r\n\r\nexport const EmptyCard: React.FC<Props> = ({ onClick }) => {\r\n    return (\r\n        <div className=\"card card__empty\" onClick={onClick}>\r\n            #\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { Card } from './card';\r\nimport { EmptyCard } from './empty_card';\r\n\r\ntype Props = {\r\n    className: string;\r\n    cards: Array<string | undefined>;\r\n    selectCard: (index: number) => void;\r\n};\r\n\r\nexport const Cards: React.FC<Props> = ({ cards, selectCard, className }) => {\r\n    return (\r\n        <div className={className}>\r\n            {\r\n                cards.map((card, i) => card\r\n                    ? <Card key={i} card={card} onClick={() => selectCard(i)} />\r\n                    : <EmptyCard key={i} onClick={() => selectCard(i)} />\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\n\r\ntype Props = {\r\n    hand: string;\r\n    select: (hand: string) => void;\r\n    selected: boolean;\r\n}\r\n\r\nexport const Hand: React.FC<Props> = ({ hand, select, selected }) => {\r\n    const extra = hand.length === 2\r\n        ? 'hand__pair'\r\n        : hand[2] === 's'\r\n            ? 'hand__suited'\r\n            : 'hand__offsuite';\r\n    return (\r\n        <div onClick={() => select(hand)} className={`hand ${extra}${selected ? \" hand__selected\" : \"\"}`}>\r\n            {hand}\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Hand } from './hand';\r\n\r\nconst CARD = ['A', 'K', 'Q', 'J', 'T', '9', '8', '7', '6'];\r\nconst CARDS_ROW = CARD.map((c1, i1) => CARD.map((c2, i2) => {\r\n    if (c1 === c2) {\r\n        return c1 + c2;\r\n    }\r\n    if (i1 > i2) {\r\n        return c2 + c1 + 's';\r\n    }\r\n\r\n    return c1 + c2 + 'o';\r\n}));\r\n\r\n\r\ntype Props = {\r\n    selectHands: (hands: string[]) => void;\r\n    currentHands: string[];\r\n}\r\n\r\nexport const Spectre: React.FC<Props> = ({ selectHands, currentHands }) => {\r\n    const [cards, setCards] = useState<string[]>(currentHands);\r\n\r\n    const select = (hand: string) => {\r\n        if (cards.includes(hand)) {\r\n            setCards(cards.filter((card) => card !== hand));\r\n        } else {\r\n            setCards(cards.concat(hand));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"spectre\">\r\n            {\r\n                CARDS_ROW.map((row, i) => (\r\n                    <div key={i} className=\"spectre__row\">\r\n                        {row.map((hand, j) => <Hand key={j} selected={cards.includes(hand)} select={select} hand={hand} />)}\r\n                    </div>\r\n                ))\r\n            }\r\n            <button onClick={() => selectHands(cards)}>SELECT</button>\r\n        </div>\r\n    );\r\n};","const ALL_CARDS = '6789TJQKA'.split('').reduce<string[]>((acc, card) => {\r\n    ['c', 's', 'h', 'd'].forEach((suite) => {\r\n        acc.push(card + suite);\r\n    });\r\n    return acc;\r\n}, []);\r\n\r\nexport const enumerateAllBoards = (dead_cards: string[], board: string[] = []): string[][] => {\r\n    if (board.length === 5) {\r\n        return [board];\r\n    }\r\n    const available_cards = ALL_CARDS.filter((card) => !board.includes(card) && !dead_cards.includes(card));\r\n    const progress: string[][] = [board];\r\n    const result: string[][] = [];\r\n    while (available_cards.length) {\r\n        const next_card = available_cards.pop()!;\r\n        progress.forEach((cards) => {\r\n            if (cards.length === 4) {\r\n                result.push(cards.concat(next_card));\r\n            } else {\r\n                if (cards.length + available_cards.length > 3) {\r\n                    progress.push(cards.concat(next_card));\r\n                }\r\n            }\r\n        });\r\n    }\r\n    return result;\r\n};\r\n","const SUITES = ['c', 's', 'd', 'h'];\r\nconst OFFSUITED = SUITES.reduce<string[][]>((res, s1) => {\r\n    SUITES.forEach((s2) => {\r\n        if (s1 !== s2) {\r\n            res.push([s1, s2]);\r\n        }\r\n    });\r\n\r\n    return res;\r\n}, []);\r\n\r\nconst PAIR_SUITES = SUITES.reduce<string[][]>((res, s1, i1) => {\r\n    SUITES.forEach((s2, i2) => {\r\n        if (i1 < i2) {\r\n            res.push([s1, s2]);\r\n        }\r\n    });\r\n\r\n    return res;\r\n}, []);\r\n\r\nexport const toCombos = (hands: string[]): [string, string][] => {\r\n    return hands.reduce<[string, string][]>((res, hand) => {\r\n        const [c1, c2, suit] = hand.split('');\r\n        if (hand.length === 2) {\r\n            res.push(...PAIR_SUITES.map<[string, string]>(([s1, s2]) => [c1 + s1, c2 + s2]));\r\n        } else if (suit === 's') {\r\n            res.push(...SUITES.map<[string, string]>((s) => [c1 + s, c2 + s]));\r\n        } else {\r\n            res.push(...OFFSUITED.map<[string, string]>(([s1, s2]) => [c1 + s1, c2 + s2]));\r\n        }\r\n\r\n        return res;\r\n    }, []);\r\n};\r\n","import { enumerateAllBoards } from './enumerateAllBoards';\r\nimport { compareHands } from './combination';\r\nimport { toCombos } from './combos';\r\n\r\nconst prettifyBalance = (balance: number[]) => {\r\n    const e = balance.reduce((res, val) => res - val, 100) / balance.length;\r\n\r\n    return balance.map((val) => Number((val + e).toFixed(2)));\r\n}\r\n\r\nconst computeWinsAndTotal = (hands: [string, string][], current_board: string[]) => {\r\n    const dead_cards = hands.flat();\r\n    const wins = Array(hands.length).fill(0);\r\n    let total = 0;\r\n    enumerateAllBoards(dead_cards, current_board).forEach((board) => {\r\n        total += 1;\r\n        const winners = compareHands(hands, board);\r\n\r\n        winners.forEach((winner) => {\r\n            wins[winner] += 1 / winners.length;\r\n        });\r\n    });\r\n\r\n    return {\r\n        wins,\r\n        total\r\n    };\r\n}\r\n\r\nexport const computeEquity = (hands: [string, string][], current_board: string[]) => {\r\n    const { wins, total } = computeWinsAndTotal(hands, current_board);\r\n    const raw_winners = wins.map((count) => Number((count / total * 100).toFixed(2)));\r\n\r\n    return prettifyBalance(raw_winners);\r\n}\r\n\r\nexport const computeEquityVsSpectre = (hands: [string, string][], spectre: string[], current_board: string[]) => {\r\n    const dead_cards = hands.flat().concat(current_board);\r\n    const combos = toCombos(spectre).filter((h) => !dead_cards.includes(h[0]) && !dead_cards.includes(h[1]));\r\n\r\n    return function* () {\r\n        let w = Array(hands.length + 1).fill(0);\r\n        let t = 0;\r\n\r\n        for (const current_hand of combos) {\r\n            const { wins, total } = computeWinsAndTotal([...hands, current_hand], current_board);\r\n            console.log(wins, total);\r\n            w = w.map((count, index) => count + wins[index]);\r\n            t = t + total;\r\n\r\n            const raw_winners = w.map((count) => Number((count / t * 100).toFixed(2)));\r\n            yield prettifyBalance(raw_winners);\r\n        }\r\n    };\r\n};\r\n","import React, { useState } from 'react';\nimport { CardList } from './blocks/card_list';\nimport { Cards } from './blocks/cards';\nimport { Spectre } from './blocks/spectre';\nimport './App.css';\nimport { computeEquity, computeEquityVsSpectre } from './math/computeEquity';\n\ntype Board = [string | undefined, string | undefined, string | undefined, string | undefined, string | undefined];\ntype PlayerHand = [string | undefined, string | undefined];\n\ntype CardMode = 'spectre' | 'hand';\n\ntype PlayerSpectreMode = {\n\tmode: 'spectre';\n\tspectre: string[];\n};\n\ntype PlayerHandMode = {\n\tmode: 'hand';\n\tcurrent_card_index: number;\n\thand: PlayerHand;\n}\n\ntype PlayerInfo = (PlayerSpectreMode | PlayerHandMode) & { percent?: number; is_hero?: boolean; };\n\nconst INIT_PLAYERS_INFO: PlayerInfo[] = [\n\t{ mode: 'hand', is_hero: true, hand: [undefined, undefined], current_card_index: 0 },\n\t...Array(4).fill(0).map<PlayerInfo>(() => ({ mode: 'hand', hand: [undefined, undefined], current_card_index: 0 }))\n];\n\nconst compact = <T extends any>(val: T | undefined): val is NonNullable<T> => !!val;\n\nfunction App() {\n\tconst [players_info, setPlayersInfo] = useState(INIT_PLAYERS_INFO);\n\n\tconst [is_calculated, setIsCalculated] = useState(false);\n\tconst [show_cardlist, setShowCardList] = useState(false);\n\tconst [show_spectre, setShowSpectre] = useState(false);\n\n\tconst [active_player, setActivePlayer] = useState(0);\n\n\tconst [board, setBoard] = useState<Board>([undefined, undefined, undefined, undefined, undefined]);\n\tconst [board_active_index, setBoardActiveIndex] = useState(-1);\n\n\tconst selected_player_info = players_info[active_player];\n\n\tconst getPlayerCardSelector = (player_index: number) => (card_index: number) => {\n\t\tconst active_player_info = players_info[player_index];\n\t\tsetActivePlayer(player_index);\n\t\tsetBoardActiveIndex(-1);\n\n\t\tif (active_player_info.mode === 'hand') {\n\t\t\tsetPlayersInfo(players_info.map((player_info, index) => index === player_index\n\t\t\t\t? {\n\t\t\t\t\t...active_player_info,\n\t\t\t\t\thand: card_index === 0\n\t\t\t\t\t\t? [undefined, undefined]\n\t\t\t\t\t\t: [active_player_info.hand[0], undefined],\n\t\t\t\t\tcurrent_card_index: card_index\n\t\t\t\t}\n\t\t\t\t: player_info\n\t\t\t));\n\t\t\tsetShowCardList(true);\n\t\t}\n\t};\n\n\tconst playerShowSpectre = (player_index: number) => {\n\t\tsetActivePlayer(player_index);\n\t\tsetShowSpectre(true);\n\t};\n\n\tconst selectBoardCard = (index: number) => {\n\t\tsetBoardActiveIndex(index);\n\t\tsetShowCardList(true);\n\t};\n\n\tconst selectPlayerSpectre = (spectre: string[]) => {\n\t\tsetPlayersInfo(players_info.map((player_info, player_index) => player_index === active_player\n\t\t\t? { mode: 'spectre', spectre }\n\t\t\t: player_info\n\t\t));\n\t\tsetShowSpectre(false);\n\t};\n\n\tconst setSpectreMode = (index: number) => {\n\t\tconst current_spectre_mode_index = players_info.findIndex((info) => info.mode === \"spectre\");\n\n\t\tsetPlayersInfo(players_info.map((player_info, player_index) => player_index === current_spectre_mode_index\n\t\t\t? { mode: 'hand', hand: [undefined, undefined], current_card_index: 0 }\n\t\t\t: player_index === index\n\t\t\t\t? { mode: 'spectre', spectre: [] }\n\t\t\t\t: player_info\n\t\t));\n\t};\n\n\tconst rendered_players_info = players_info.map((player_info, index) => {\n\t\tif (player_info.is_hero) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\tHero\n\t\t\t\t\t{player_info.percent !== undefined && <span className=\"win_percent\">{player_info.percent}</span>}\n\t\t\t\t\t<Cards className=\"player\" cards={(player_info as PlayerHandMode).hand} selectCard={getPlayerCardSelector(index)} />\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\tPlayer{index + 1}\n\t\t\t\t<button onClick={() => setSpectreMode(index)}>$$$</button>\n\t\t\t\t{player_info.percent !== undefined && <span className=\"win_percent\">{player_info.percent}</span>}\n\t\t\t\t{player_info.mode === \"spectre\"\n\t\t\t\t\t? <button className=\"show_spectre\" onClick={() => playerShowSpectre(index)}>{player_info.spectre.join(\",\") || \"SELECT SPECTRE\"}</button>\n\t\t\t\t\t: <Cards className=\"player\" cards={player_info.hand} selectCard={getPlayerCardSelector(index)} />\n\t\t\t\t}\n\t\t\t</>\n\t\t);\n\t});\n\n\tconst compute = () => {\n\t\tconst hands: [string, string][] = [];\n\t\tconst hand_index_to_percent: Record<number, number | undefined> = {};\n\t\tlet spectre: string[] | undefined = undefined;\n\t\tlet spectre_index: number | undefined = undefined;\n\n\t\tplayers_info.forEach((player_info, index) => {\n\t\t\tif (player_info.mode === 'spectre' && player_info.spectre.length) {\n\t\t\t\tspectre_index = index;\n\t\t\t\tspectre = player_info.spectre;\n\t\t\t} else if (player_info.mode === 'hand' && player_info.hand[0] && player_info.hand[1]) {\n\t\t\t\thands.push(player_info.hand as [string, string]);\n\t\t\t\thand_index_to_percent[index] = 0;\n\t\t\t}\n\t\t});\n\n\t\tif (!spectre) {\n\t\t\tsetIsCalculated(true);\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst percent = computeEquity(hands, board.filter(compact));\n\t\t\t\tlet i = 0;\n\t\t\t\tfor (const key in hand_index_to_percent) {\n\t\t\t\t\thand_index_to_percent[key] = percent[i];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\n\t\t\t\tsetPlayersInfo(players_info.map((player_info, index) => hand_index_to_percent[index]\n\t\t\t\t\t? { ...player_info, percent: hand_index_to_percent[index] }\n\t\t\t\t\t: player_info\n\t\t\t\t));\n\n\t\t\t\tsetIsCalculated(false);\n\t\t\t});\n\t\t} else {\n\t\t\tconst generator = computeEquityVsSpectre(hands, spectre, board.filter(compact))();\n\t\t\tconst nextIteration = () => setTimeout(() => {\n\t\t\t\tconst next = generator.next();\n\t\t\t\tif (next.done) {\n\t\t\t\t\tsetIsCalculated(false);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\tfor (const key in hand_index_to_percent) {\n\t\t\t\t\t\thand_index_to_percent[key] = next.value[i];\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetPlayersInfo(players_info.map((player_info, index) => hand_index_to_percent[index]\n\t\t\t\t\t\t? { ...player_info, percent: hand_index_to_percent[index] }\n\t\t\t\t\t\t: index === spectre_index\n\t\t\t\t\t\t\t? { ...player_info, percent: next.value[next.value.length - 1] }\n\t\t\t\t\t\t\t: player_info\n\t\t\t\t\t));\n\n\t\t\t\t\tnextIteration();\n\t\t\t\t}\n\t\t\t}, 5);\n\t\t\tsetIsCalculated(true);\n\t\t\tnextIteration();\n\t\t}\n\t}\n\n\tconst selected_cards = players_info.reduce<string[]>((result, player_info) => {\n\t\tif (player_info.mode === 'hand') {\n\t\t\treturn result.concat(player_info.hand.filter(compact));\n\t\t}\n\n\t\treturn result;\n\t}, board.filter(compact));\n\n\tconst selectCard = (card: string) => {\n\t\tif (board_active_index !== -1) {\n\t\t\tsetBoard(board.map((board_card, index) => index === board_active_index ? card : board_card) as Board);\n\t\t\tif (board_active_index > 1) {\n\t\t\t\tsetShowCardList(false);\n\t\t\t} else {\n\t\t\t\tsetBoardActiveIndex(board_active_index + 1);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tconst current_card_index = (selected_player_info as PlayerHandMode).current_card_index;\n\n\t\tsetPlayersInfo(players_info.map((player_info, index) => index === active_player\n\t\t\t? {\n\t\t\t\t...selected_player_info,\n\t\t\t\thand: current_card_index === 0\n\t\t\t\t\t? [card, undefined]\n\t\t\t\t\t: [(selected_player_info as PlayerHandMode).hand[0], card],\n\t\t\t\tcurrent_card_index: current_card_index + 1,\n\t\t\t}\n\t\t\t: player_info\n\t\t));\n\n\t\tif (current_card_index === 1) {\n\t\t\tsetShowCardList(false);\n\t\t}\n\t};\n\n\tconst copyToClipboard = () => {\n\t\tconst str = \"\";\n\t\t// const str = is_p2_spectre && p2_spectre.length && p1_full.length === 2\n\t\t// \t? `${p1_full.join(\"\")} vs ${p2_spectre.join(\", \")} - ${p1_info}`\n\t\t// \t: p1_full.length === 2 || p2_full.length === 2\n\t\t// \t\t? `${p1_full.join(\"\")} vs ${p2_full.join(\"\")} - ${p1_info}`\n\t\t// \t\t: null;\n\n\t\tif (!str) {\n\t\t\treturn;\n\t\t}\n\t\tconst el = document.createElement('textarea');\n\t\tel.value = str;\n\t\tel.setAttribute('readonly', '');\n\t\tel.style.position = 'absolute';\n\t\tel.style.left = '-9999px';\n\t\tdocument.body.appendChild(el);\n\t\tel.select();\n\t\tdocument.execCommand('copy');\n\t\tdocument.body.removeChild(el);\n\t};\n\n\treturn (\n\t\t<div className=\"calculator\">\n\t\t\t{rendered_players_info}\n\t\t\tBOARD\n\t\t\t<Cards className=\"board\" selectCard={selectBoardCard} cards={board} />\n\t\t\t{is_calculated\n\t\t\t\t? <div className=\"loader\">Loading...</div>\n\t\t\t\t: (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<button onClick={compute}>COMPUTE</button>\n\t\t\t\t\t\t<button onClick={copyToClipboard}>COPY</button>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t\t{show_cardlist && <CardList selected={selected_cards} selectCard={selectCard} />}\n\t\t\t{show_cardlist && <button onClick={() => setShowCardList(false)}>HIDE CARDLIST</button>}\n\t\t\t{show_spectre && selected_player_info.mode === 'spectre' && <Spectre currentHands={selected_player_info.spectre} selectHands={selectPlayerSpectre} />}\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}